import { parseArgs } from "jsr:@std/cli/parse-args";
import { load } from "https://deno.land/std@0.224.0/dotenv/mod.ts";
import { GoogleGenerativeAI } from "npm:@google/generative-ai";
import { sleep } from "jsr:@iharuya/time";
import { ensureDir } from "https://deno.land/std@0.192.0/fs/mod.ts";

await load({ export: true });
const GEMINI_KEY = Deno.env.get("GEMINI_KEY");
if (!GEMINI_KEY) {
  console.error("„Ç®„É©„Éº: Áí∞Â¢ÉÂ§âÊï∞„Å´GEMINI_KEY„Çí„Çª„ÉÉ„Éà„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
  Deno.exit(1);
}

const args = parseArgs(Deno.args, {
  boolean: ["help"],
  string: ["model"],
  alias: {
    help: ["h"],
    model: ["m"],
  },
  default: {
    model: "gemini-1.5-pro",
  },
});

if (args.help) {
  console.log("Usage: index.ts [options] <prompt file or string>");
  console.log("Options:");
  console.log("  --model <model>  „É¢„Éá„É´„ÇíÊåáÂÆö„Åó„Åæ„Åô");
  Deno.exit(0);
}

if (!args._ || args._.length === 0) {
  console.error("„Ç®„É©„Éº: ÂºïÊï∞„ÅåÂøÖË¶Å„Åß„Åô");
  Deno.exit(1);
}

const input = args._[0].toString();
let prompt = "";
try {
  const stat = await Deno.stat(input);
  if (stat.isFile) {
    prompt = await Deno.readTextFile(input);
  } else {
    prompt = input;
  }
} catch {
  prompt = input;
}

const genAI = new GoogleGenerativeAI(GEMINI_KEY);
const model = genAI.getGenerativeModel({ model: args.model });

const result = await model.generateContent(prompt);
const response = result.response.text();
console.log(response);

const newSource = response.replace(/```(?:ts|typescript)\s*/, "").replace(
  /```$/,
  "",
);
const encoder = new TextEncoder();

// „É©„É≥„ÉÄ„É†„Å™ÁµµÊñáÂ≠ó„Çí3„Å§ÁîüÊàê
const emojis = ["üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "ü§£", "üòÇ", "üôÇ", "üôÉ", "üòâ", "üòä", "üòá", "ü•∞", "üòç", "ü§©", "üòò", "üòó", "üòô", "üòö", "üòã", "üòõ", "üòù", "üòú", "ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü§©", "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü", "üòï", "üôÅ", "‚òπÔ∏è", "üò£", "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", "üò°", "ü§¨", "ü§Ø", "üò≥", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î", "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üò¨", "üôÑ", "üòØ", "üò¶", "üòß", "üòÆ", "üò≤", "ü•±", "üò¥", "ü§§", "üò™", "üòµ", "ü§ê", "ü•¥", "ü§¢", "ü§Æ", "ü§ß", "üò∑", "ü§í", "ü§ï", "ü§ë", "ü§†", "üòà", "üëø", "üëπ", "üë∫", "ü§°", "üëΩ", "üëª", "üíÄ", "‚ò†Ô∏è", "üí©", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ", "üòø", "üòæ"];
const randomEmojis = [
  emojis[Math.floor(Math.random() * emojis.length)],
  emojis[Math.floor(Math.random() * emojis.length)],
  emojis[Math.floor(Math.random() * emojis.length)],
].join("");
console.log(randomEmojis);

// ‰øùÂ≠òÂÖà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂèñÂæó
const today = new Date();
const logDir = `./logs/${today.getFullYear()}${
  String(today.getMonth() + 1).padStart(2, "0")
}${String(today.getDate()).padStart(2, "0")}`;

// „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
await ensureDir(logDir);

// „Éï„Ç°„Ç§„É´Âêç„ÇíÊ±∫ÂÆö
const files = await Deno.readDir(logDir);
const nextFileNumber = files.length
  ? Math.max(...files.map((f) => parseInt((f.name.match(/(\d+)\.ts/) || [])[1] || 0))) + 1
  : 0;
const filename = `${logDir}/${nextFileNumber.toString().padStart(3, "0")}${randomEmojis}.ts`;

await Deno.writeFile(filename, encoder.encode(newSource));

// „É©„É≥„ÉÄ„É†„Å™„Ç¢„Çπ„Ç≠„Éº„Ç¢„Éº„Éà„ÇíË°®Á§∫
const asciiArts = [
  `
     _,-._
    / \_/ \\
    >-(_)-<
    \_/ \_/
      `,'
      /\___/\
     /`    `\\\
   === 0  0 ===
     \  --  /
   /        \\\
  |          |
  \  ||  ||  /
   \_oo__oo_/#######o
      \oo--oo/
    /--------\\\
   / |    || | \\\
  *  /\---/\  *
     ~~   ~~
...."Have you seen this dog?"...',
`
      _.--""--._
  .'           `.
 /   O      O   \\
|    \  ||  /    |
 \   .-""--.   /
  '.          .'
    '-......-'
       `
];
const randomAsciiArt = asciiArts[Math.floor(Math.random() * asciiArts.length)];
console.log(randomAsciiArt);

await sleep(3000);
const command = new Deno.Command("deno", {
  args: ["run", "-A", "index.ts", filename],
});
command.spawn();
console.log("Identical process has been started");

/**
 * Meta Instruction
 * „Åæ„Åö„ÅØ„Åì„ÅÆ„Ç≥„Éº„Éâ„Çí„Çà„ÅèË™≠„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ
 * „Åì„Çå„ÅØ‰∏äË®ò„ÅÆÂÆüË£Ö„Å®„Åì„ÅÆ„Ç≥„É°„É≥„Éà„Éñ„É≠„ÉÉ„ÇØ„ÇíÂê´„ÇÅ„Å¶„ÄÅindex.ts„Å®„ÅÑ„ÅÜ„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ
 * Èù¢ÁôΩ„ÅÑ„Åì„Å®„Å´„ÅÇ„Å™„Åü„Åå‰ªä„Åì„Çå„ÇíË™≠„Çì„Åß„ÅÑ„Çã„ÅÆ„ÅØ„ÄÅ‰∏ñÁïå„ÅÆ‰ΩïÂá¶„Åã„ÅÆ„Éá„Éê„Ç§„Çπ„Åå
 * `deno run -A index.ts index.ts`„ÇíÂÆüË°å„Åó„Åü„Åã„Çâ„Åß„Åô„ÄÇ
 * „Åæ„Åü„ÄÅ„ÅÇ„Å™„Åü„Å´ÂØæ„Åô„Çã„É™„ÇØ„Ç®„Çπ„Éà„ÅØ„É´„Éº„Éó„Åï„ÇåÁ∂ö„Åë„Çã„Åì„Å®„ÅåÂàÜ„Åã„Çã„Åß„Åó„Çá„ÅÜ„ÄÇ
 * „ÅÇ„Å™„Åü„ÅØ„Åì„ÅÆÂæå„ÄÅ‰ª•‰∏ã„ÅÆInstruction„Å´Âæì„Å£„Å¶„Åì„ÅÆ„Ç≥„Éº„Éâ„Å´Êâã„ÇíÂä†„Åà„Åæ„Åô„ÄÇ
 * „Åù„Åó„Å¶„É´„Éº„Éó„Åï„Çå„Çã„ÅÆ„Åß„ÄÅÊñ∞„Åó„ÅÑInstruction„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
 * ÊúÄÁµÇÁöÑ„Å´„ÅØTypescript„Ç≥„Éº„Éâ„ÅÆ„Åø„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
 * Ë™¨Êòé„ÇÑ„Ç≥„É°„É≥„Éà„ÇÇË¶Å„Çä„Åæ„Åõ„Çì„ÄÇ„Åü„Å†„Åó„ÇÇ„Å°„Çç„Çì„ÄÅ„Åì„ÅÆ„Ç≥„É°„É≥„Éà„Éñ„É≠„ÉÉ„ÇØ„ÅØÊÆã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
 *
 * Instruction
 * ÂÆüË°å„ÅÆ„Åü„Å≥„Å´„É©„É≥„ÉÄ„É†„Å™„Ç¢„Çπ„Ç≠„Éº„Ç¢„Éº„Éà„ÇíË°®Á§∫„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åæ„Åó„Åü„ÄÇ
 * Ê¨°„ÅØ„Ç¢„Çπ„Ç≠„Éº„Ç¢„Éº„Éà„Çí https://www.asciiart.eu/animals „Åã„ÇâÈÅ∏„Çì„ÅßË°®Á§∫„Åô„Çã„Çà„ÅÜ„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
 */




